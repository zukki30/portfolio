import type { NextPage, GetServerSideProps } from "next";
import Head from "next/head";
import gql from "graphql-tag";

import { urqlClient } from "@/libs/gql-requests";
import { Output } from "@/types";
import { OutputRes } from "@/types/api";

type OutputDetailProps = {
  output: Output;
};

const OutputDetail: NextPage<OutputDetailProps> = (props) => {
  console.log(props);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      <main>body</main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { id } = context.query;

  try {
    const client = await urqlClient();

    // 変数なしでGraphQL呼び出し
    const postsQuery = gql`
      query ($getOutputId: ID!) {
        getOutput(id: $getOutputId) {
          id
          title
          image {
            url
            width
            height
          }
          page_url
          start_date
          end_date
          content
          front_end_info {
            repository_url
            skills
            content
            before_updates {
              title
              content
              skills
            }
          }
          back_end_info {
            repository_url
            skills
            content
            before_updates {
              title
              content
              skills
            }
          }
        }
      }
    `;
    const result = await client
      .query(postsQuery, {
        getOutputId: id,
      })
      .toPromise();
    const output = result.data.getOutput as OutputRes;

    const { front_end_info, back_end_info } = output;
    const fetchOutput = {
      id: output.id,
      title: output.title,
      image: output.image,
      pageUrl: output.page_url,
      startDate: output.start_date || "",
      endDate: output.end_date || "",
      content: output.content,
      frontEndInfo: {
        repositoryUrl: front_end_info.repository_url,
        skills: front_end_info.skills,
        content: front_end_info.content,
        beforeUpdates: front_end_info.before_updates,
      },
      backEndInfo: {
        repositoryUrl: back_end_info.repository_url,
        skills: back_end_info.skills,
        content: back_end_info.content,
        beforeUpdates: back_end_info.before_updates,
      },
    } as Output;

    return {
      props: {
        output: fetchOutput,
      },
    };
  } catch (e) {
    return {
      notFound: true,
    };
  }
};

export default OutputDetail;
